{"ast":null,"code":"import _defineProperty from \"/Users/yeng/Goodreadskiller/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/yeng/Goodreadskiller/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/yeng/Goodreadskiller/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yeng/Goodreadskiller/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/yeng/Goodreadskiller/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/yeng/Goodreadskiller/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yeng/Goodreadskiller/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/Users/yeng/Goodreadskiller/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/yeng/Goodreadskiller/client/src/components/grid.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport Column from './column';\nimport styled from 'styled-components';\nimport '@atlaskit/css-reset';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { connect } from 'react-redux';\nimport { updateState as _updateState } from '../actions/simpleAction';\nvar Container = styled.div(_templateObject());\n\nvar grid =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(grid, _Component);\n\n  function grid() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, grid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(grid)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onDragEnd = function (result) {\n      var destination = result.destination,\n          source = result.source,\n          draggableId = result.draggableId;\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      }\n\n      var start = _this.props.bookState.columns[source.droppableId];\n      var finish = _this.props.bookState.columns[destination.droppableId];\n\n      if (start === finish) {\n        var newBookIds = Array.from(start.bookIds);\n        var bookObject;\n        newBookIds.forEach(function (book) {\n          if (book.id === draggableId) {\n            bookObject = book;\n          }\n        });\n        newBookIds.splice(source.index, 1);\n        newBookIds.splice(destination.index, 0, bookObject);\n\n        var newColumn = _objectSpread({}, start, {\n          bookIds: newBookIds\n        });\n\n        var newState = _objectSpread({}, _this.props.bookState, {\n          columns: _objectSpread({}, _this.props.bookState.columns, _defineProperty({}, newColumn.id, newColumn))\n        });\n\n        _this.props.updateState(newState);\n      } else {\n        var _objectSpread3;\n\n        var _newBookIds = Array.from(start.bookIds);\n\n        var newBook = _newBookIds.splice(source.index, 1)[0];\n\n        var newStart = _objectSpread({}, start, {\n          bookIds: _newBookIds\n        });\n\n        var finishBookIds = Array.from(finish.bookIds);\n        finishBookIds.splice(destination.index, 0, newBook);\n\n        var newFinish = _objectSpread({}, finish, {\n          bookIds: finishBookIds\n        });\n\n        var _newState = _objectSpread({}, _this.props.bookState, {\n          columns: _objectSpread({}, _this.props.bookState.columns, (_objectSpread3 = {}, _defineProperty(_objectSpread3, newStart.id, newStart), _defineProperty(_objectSpread3, newFinish.id, newFinish), _objectSpread3))\n        });\n\n        _this.props.updateState(_newState);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(grid, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      if (prevProps.bookState.books !== this.props.bookState.books) {\n        var newState = _objectSpread({}, this.props.bookState, {\n          columns: _objectSpread({}, this.props.bookState.columns, {\n            'column-1': _objectSpread({}, this.props.bookState.columns['column-1'], {\n              bookIds: Object.values(this.props.bookState.books)\n            })\n          })\n        });\n\n        this.props.updateState(newState);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(DragDropContext, {\n        onDragEnd: this.onDragEnd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, this.props.bookState.columnOrder.map(function (columnId) {\n        var column = _this2.props.bookState.columns[columnId];\n        return React.createElement(Column, {\n          key: column.id,\n          column: column,\n          books: column.bookIds,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return grid;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {\n    bookState: state.simpleReducer\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    updateState: function updateState(state) {\n      return dispatch(_updateState(state));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(grid);","map":{"version":3,"sources":["/Users/yeng/Goodreadskiller/client/src/components/grid.js"],"names":["React","Component","Column","styled","DragDropContext","connect","updateState","Container","div","grid","onDragEnd","result","destination","source","draggableId","droppableId","index","start","props","bookState","columns","finish","newBookIds","Array","from","bookIds","bookObject","forEach","book","id","splice","newColumn","newState","newBook","newStart","finishBookIds","newFinish","prevProps","prevState","snapshot","books","Object","values","columnOrder","map","columnId","column","mapStateToProps","state","simpleReducer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Column from './column'\nimport styled from 'styled-components'\nimport '@atlaskit/css-reset'\nimport { DragDropContext } from 'react-beautiful-dnd'\n\nimport { connect } from 'react-redux'\nimport { updateState } from '../actions/simpleAction'\n\nconst Container = styled.div`\n  display: flex;\n`\nclass grid extends Component {\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.bookState.books !== this.props.bookState.books) {\n      const newState = {\n        ...this.props.bookState,\n        columns: {\n          ...this.props.bookState.columns,\n          'column-1': {\n            ...this.props.bookState.columns['column-1'],\n            bookIds: Object.values(this.props.bookState.books)\n          }\n        }\n      }\n      this.props.updateState(newState)\n    }\n  }\n\n  onDragEnd = result => {\n    const { destination, source, draggableId } = result\n\n    if (!destination) {\n      return\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return\n    }\n\n    const start = this.props.bookState.columns[source.droppableId]\n    const finish = this.props.bookState.columns[destination.droppableId]\n\n    if (start === finish) {\n      const newBookIds = Array.from(start.bookIds)\n      var bookObject\n\n      newBookIds.forEach(function(book) {\n        if (book.id === draggableId) {\n          bookObject = book\n        }\n      })\n\n      newBookIds.splice(source.index, 1)\n      newBookIds.splice(destination.index, 0, bookObject)\n\n      const newColumn = {\n        ...start,\n        bookIds: newBookIds\n      }\n\n      const newState = {\n        ...this.props.bookState,\n        columns: {\n          ...this.props.bookState.columns,\n          [newColumn.id]: newColumn\n        }\n      }\n\n      this.props.updateState(newState)\n    } else {\n      const newBookIds = Array.from(start.bookIds)\n      const newBook = newBookIds.splice(source.index, 1)[0]\n\n      const newStart = {\n        ...start,\n        bookIds: newBookIds\n      }\n\n      const finishBookIds = Array.from(finish.bookIds)\n\n      finishBookIds.splice(destination.index, 0, newBook)\n\n      const newFinish = {\n        ...finish,\n        bookIds: finishBookIds\n      }\n\n      const newState = {\n        ...this.props.bookState,\n        columns: {\n          ...this.props.bookState.columns,\n          [newStart.id]: newStart,\n          [newFinish.id]: newFinish\n        }\n      }\n      this.props.updateState(newState)\n    }\n  }\n\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Container>\n          {this.props.bookState.columnOrder.map(columnId => {\n            const column = this.props.bookState.columns[columnId]\n            return (\n              <Column key={column.id} column={column} books={column.bookIds} />\n            )\n          })}\n        </Container>\n      </DragDropContext>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    bookState: state.simpleReducer\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    updateState: state => dispatch(updateState(state))\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(grid)\n"]},"metadata":{},"sourceType":"module"}